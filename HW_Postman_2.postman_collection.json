{
	"info": {
		"_postman_id": "3db94b83-c839-4845-a5b9-3a48e16bfb25",
		"name": "HW_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Req_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос;\r",
							"//2. Статус код 200;\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Req_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"Response name equal to request name Lidziya\", function(){\r",
							"    pm.expect(responseJson.name).to.eql(\"Lidziya\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"Response age equal to request age 25\", function(){\r",
							"    pm.expect(responseJson.age).to.eql('25');\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Response body salary equal to request salary 600\", function(){\r",
							"    pm.expect(responseJson.salary).to.eql(600);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var reqBody = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"pm.test(\"Response name equal to request name \", function(){\r",
							"    pm.expect(responseJson.name).to.eql(reqBody.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Response age equal to request age\", function(){\r",
							"    pm.expect(responseJson.age).to.eql(reqBody.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Response salary equal to request salary\", function(){\r",
							"    pm.expect(responseJson.salary).to.eql(parseInt(reqBody.salary));\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(responseJson.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"response u_salary_1_5_year = request salary*4 \", function(){\r",
							"var salary4 = (reqBody.salary)*4\r",
							"pm.expect(responseJson.family.u_salary_1_5_year).to.eql(salary4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lidziya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Req_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var queryname = pm.request.url.query.get(\"name\");\r",
							"var queryage = pm.request.url.query.get(\"age\");\r",
							"var querysalary = parseInt(pm.request.url.query.get(\"salary\"));\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Response name equals request name\",function() {\r",
							"   pm.expect(responseJson.name).to.eql(queryname);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Response age equals request age\",function() {\r",
							"   pm.expect(responseJson.age).to.eql(queryage);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Response salary equals request salary\",function() {\r",
							"   pm.expect(responseJson.salary).to.eql(querysalary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(responseJson.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Parameter dog has parameter name\", function(){\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Parameter dog has parameter age\", function(){\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property('age');\r",
							"    });\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Parameter name has parameter Luky\", function(){\r",
							"    pm.expect(responseJson.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Parameter name has parameter Luky\", function(){\r",
							"    pm.expect(responseJson.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Lidziya&age=25&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lidziya"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Req_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Response status is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const resp = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Response name equal to request name\", function(){\r",
							"pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Response age equal to request age\", function() {\r",
							"    pm.expect(resp.age).to.eql(parseInt(req.age));\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary (параметр salary из response.)\r",
							"console.log(resp.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary (параметр salary из response).\r",
							"console.log(resp.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary parameter 0 from response equal to request salary\", function(){\r",
							"    pm.expect(resp.salary[0]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let salary2 = 2 * req.salary;\r",
							"pm.test(\"request salary*2 = response salary 1st parameter\", function(){\r",
							"    pm.expect(parseInt(resp.salary[1])).to.eql(salary2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let salary3 = 3*req.salary;\r",
							"pm.test(\"request salary*3 = response salary2nd parameter\", function(){\r",
							"    pm.expect(parseInt(resp.salary[2])).to.eql(salary3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.get(\"name\");\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.get(\"age\");\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.get(\"salary\");\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var salary=resp.salary;\r",
							"for  (var i=0; i<salary.length; i++) {\r",
							"    console.log(\"Salary_\"+i+\" = \"+salary[i])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=John&age=32&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "John"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Req_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var resp=pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req=request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response json has parameter start_qa_salary\", function(){\r",
							"pm.expect(resp).to.hasOwnProperty(resp.start_qa_salary);\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response json has parameter qa_salary_after_6_months\", function(){\r",
							"pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response json has parameter qa_salary_after_12_months\", function(){\r",
							"pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response json has parameter qa_salary_after_1.5_year\", function(){\r",
							"pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response json has parameter qa_salary_after_3.5_years\", function(){\r",
							"pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response json has parameter person\", function(){\r",
							"pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response json has parameter start_qa_salary equal to request salary\", function(){\r",
							"pm.expect(resp.start_qa_salary).to.eql(parseInt(req.salary));\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"var salary6m=(req.salary)*2;\r",
							"pm.test(\"Response json has parameter qa_salary_after_6_months equal to request salary*2\", function(){\r",
							"pm.expect(resp.qa_salary_after_6_months).to.eql(salary6m);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"var salary12m=(req.salary)*2.7;\r",
							"pm.test(\"Response json has parameter qa_salary_after_12_months equal to request salary*2.7\", function(){\r",
							"pm.expect(resp.qa_salary_after_12_months).to.eql(salary12m);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"var salary18m=(req.salary)*3.3;\r",
							"pm.test(\"Response json has parameter qa_salary_after_1.5_year  equal to request salary*3.3\", function(){\r",
							"pm.expect(resp['qa_salary_after_1.5_year']).to.eql(salary18m);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"var salary42m=(req.salary)*3.8;\r",
							"pm.test(\"Response json has parameter qa_salary_after_3.5_years equal to request salary*3.8\", function(){\r",
							"pm.expect(resp['qa_salary_after_3.5_years']).to.eql(salary42m);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 2-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response person parameter has 1 u_name element equal to salary from request \", function(){\r",
							"pm.expect(resp.person.u_name[1]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Response  parameter u_age equal to age from request \", function(){\r",
							"pm.expect(resp.person.u_age).to.eql(parseInt(req.age));\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"var salary60m=(req.salary)*4.2;\r",
							"pm.test(\"Response json has parameter qa_salary_after_5_years equal to request salary*4.2\", function(){\r",
							"pm.expect(resp.person.u_salary_5_years).to.eql(salary60m);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var person=resp.person;\r",
							"for  (var property in person) {\r",
							"          console.log(\"person.\" + property + \" = \" + person[property])\r",
							"    };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}